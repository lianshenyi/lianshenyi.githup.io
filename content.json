{"meta":{"title":"lianfam","subtitle":"行走在自由与理想的悬崖","description":"","author":"lian","url":"https://lianshenyi.githup.io","root":"/"},"pages":[{"title":"categories","date":"2023-03-07T10:04:12.000Z","updated":"2023-03-07T10:04:12.024Z","comments":true,"path":"categories/index.html","permalink":"https://lianshenyi.githup.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2023-03-07T06:55:01.000Z","updated":"2023-03-08T01:28:54.898Z","comments":true,"path":"friends/index.html","permalink":"https://lianshenyi.githup.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-03-07T07:49:24.000Z","updated":"2023-03-08T01:28:24.231Z","comments":true,"path":"tags/index.html","permalink":"https://lianshenyi.githup.io/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2023-03-07T10:03:04.000Z","updated":"2023-03-07T10:03:04.141Z","comments":true,"path":"about/index.html","permalink":"https://lianshenyi.githup.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"gitea","slug":"gitea","date":"2023-03-04T07:12:36.139Z","updated":"2023-03-07T08:40:13.175Z","comments":true,"path":"2023/03/04/gitea/","link":"","permalink":"https://lianshenyi.githup.io/2023/03/04/gitea/","excerpt":"摘要","text":"摘要 git+gitea+jenkins参考文档：https://blog.csdn.net/tianmingqing0806/article/details/125408239 12345OpenJDK采用GPL V2协议放出，而Oracle JDK则采用JRL放出。 两者协议虽然都是开放源代码的，但是在使用上的不同在于GPL V2允许在商业上使用，而JRL只允许个人研究使用。所以，如果小伙伴们如果你的项目自己玩，两者差不多，Oracle JDK由专业的公司维护更稳定一些。如果你的项目准备商用，建议使用OpenJDK，可以避免法律上的纠纷。并且两个功能差不多，但是从一个切到另一个还是需要测试，所以尽量一开始就选择自己需要的版本。在本篇教程中，您将使用apt安装OpenJDK 11版本的Java Runtime Environment（JRE）和Java Developer Kit（JDK） 1apt install openjdk-11-jre-headless 安装git1234567891011121314151617安装gityum -y install git安装sqlite3linux上一般都是自带有sqlite3数据库，如果没有可自行安装执行命令 sqlite3下载 gitea得地址wget https://dl.gitea.io/gitea/1.15.8/gitea-1.15.8-linux-amd64修改执行权限chmod 777 gitea-1.15.8-linux-amd64启动 gitea-server./gitea-1.15.8-linux-amd64 web后台运行gitea-servernohup ./gitea-1.15.8-linux-amd64 web &amp;gitea 配置 浏览器访问 http://ip:3000 根据引导配置信息 创建一个目录用于存放gitea和git数据的目录我自己是放在&#x2F;git里面，大家看着改。 1mkdir /data/git 添加Git用户用来运行gitea，后面创建的service也是通过这个用户运行，还有密钥那些东西不会和root之类的用户搞混。 123groupadd gituseradd git -g git 下载安装包：https://dl.gitea.io/gitea 1234567891011# 去到你要安装的目录cd /git# 下载wget -O gitea https://dl.gitea.io/gitea/1.17.3/gitea-1.17.3-linux-amd64# 设置成可运行文件chmod +x gitea# 测试运行./gitea web 运行成功的话，别退出测试下[ip]:3000是否可以访问，云服务器的话去设置下安全策略开放3000端口。 或者本身服务器开了防火墙的 12345678910# 查看是不是没有开放3000端口firewall-cmd --zone=public --list-ports# 如果没有就添加一个firewall-cmd --zone=public --add-port=3000/tcp --permanent# 重新载入配置文件firewall-cmd --reloadvi /etc/mysql/mysql.conf.d/mysqld.cnf注释掉这一行，没有注释意思是只运行本地连接#bind-address = 127.0.0.1 没问题就直接退出gitea程序，继续下面的操作。 更换目录的用户1chown -R git:git /git 配置service然后就可以很爽的用：systemctl控制了 1vi /etc/systemd/system/gitea.service 官方有提供了一份services配置文件：gitea&#x2F;gitea.service at master · go-gitea&#x2F;gitea (github.com) 注意： WorkingDirectory配置项是工作路径得是存在且是git有权限的目录，如果不想太麻烦，可以删除… 懒人版请直接复制下面的（从头到尾和我一样的目录的） 1234567891011121314151617cat &gt; /etc/systemd/system/gitea.service &lt;&lt;EOF[Unit]Description=GiteaAfter=syslog.targetAfter=network.target[Service]RestartSec=2sType=simpleUser=gitGroup=gitExecStart=/data/git/gitea web --config /data/git/custom/conf/app.iniRestart=always[Install]WantedBy=multi-user.targetEOF 启动服务和设置开机启动 1systemctl start gitea &amp;&amp; systemctl enable gitea mysql安装1234567891011121314apt install mysql-server -y #ubuntu安装mysql -uroot -p #进入mysql#修改密码alter user root@localhost identified by &#x27;123456&#x27;;#刷新FLUSH PRIVILEGES;CREATE USER &#x27;gitea&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;gitea&#x27;;CREATE DATABASE giteadb CHARACTER SET &#x27;utf8mb4&#x27; COLLATE &#x27;utf8mb4_unicode_ci&#x27;;GRANT ALL PRIVILEGES ON giteadb.* TO &#x27;gitea&#x27;@&#x27;%&#x27;;FLUSH PRIVILEGES; 报错：无法运行时 123cat /var/log/syslog |grep gitea权限不足chmod 777 /home/git 然后在自己电脑浏览器打开[ip]:3000，点击登陆初始化设置，我这边给它设置了域名和端口，所以访问变成[域名]:[端口号]，完成。 nginx代理因为我们80端口都是给nginx用了，3000端口不想报漏在外面（主要是看着域名后面跟着端口号好难受），我们给他做一下nginx代理 找到nginx的配置文件目录，添加一个网站配置文件,如果要ssl的自己添加就行了，改完修改下app.ini的ROOT_URL重启一下gitea，nginx重载下配置文件 12345678910111213server &#123; listen 80; server_name [域名]&#125;location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:3000;&#125;location ~ .*\\.(js|css|png)$ &#123; proxy_pass http://127.0.0.1:3000;&#125; 配置SSH密钥 作用：这些 SSH 公钥已经关联到你的账号。相应的私钥拥有完全操作你的仓库的权限。 github写的ssh密钥操作： 首先检查现有 SSH 密钥 - GitHub Docs 如果没有ssh密钥生成新 SSH 密钥并添加到 ssh-agent - GitHub Docs 然后：登陆-&gt;点击右上角的头像-&gt;设置-&gt;SSH&#x2F;GPG密钥-&gt;增加密钥（就是刚刚生成文件中的.pub文件） 可以在你自己电脑输入命令可以查看 12# 如果你刚刚 使用ssh-keygen生成密钥的时候-t参数有填写 那么下面命令的rsa换成你自己的参数cat ~/.ssh/id_rsa.pub 然后在自己电脑激活一下完成 123456&gt; ssh git@[你gitea域名或者ip]# 显示下面文字就成功了PTY allocation request failed on channel 0Hi there, 你的gitea名字! You&#x27;ve successfully authenticated with the key named mac, but Gitea does not provide shell access.If this is unexpected, please log in with password and setup Gitea under another user.Connection to [你gitea域名或者ip] closed. Jenkins安装配置源123sudo apt-get install --reinstall ca-certificateswget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -sudo sh -c &#x27;echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#x27; 更新源1sudo apt-get -y update 这一步会可能会报错，Could not connect to pkg.jenkins.io:80 (146.75.114.133), connection timed out [IP: 146.75.114.133 80 不要紧，多执行几次，反复试，总有一次能成功，我也是搞了好几次才OK 安装1sudo apt-get install jenkins 默认端口是8080，通过http://ip:8080/访问 管理员默认密码地址： 1cat /var/lib/jenkins/secrets/initialAdminPassword 修改默认端口 123检查 /etc/init.d/jenkins 脚本，修改 do_start 函数的 check_tcp_port 命令，端口号从 8080 换成 8848：修改 /etc/default/jenkins 文件，将端口 8080 改成 8848修改 /usr/lib/systemd/system/jenkins.service，将8080改成8848，并将user,group修改为root 重启Jenkins 12# 由于修改了配置，这一步必须要做systemctl daemon-reload &amp;&amp; systemctl restart jenkins 卸载Jenkins（APT）&#x2F;&#x2F;服务 1sudo apt-get remove jenkins &#x2F;&#x2F;安装包，注意这里如果不是ubuntu那就yum 1sudo apt-get remove --auto-remove jenkins &#x2F;&#x2F;配置和数据 123sudo apt-get purge jenkinssudo apt-get purge --auto-remove jenkins 插件推荐 Publish Over SSH: Publish Over SSH | Jenkins plugin 注：用于分布式环境，Jenkins构建成功后，发送服务器ssh请求 PostBuildScript ：PostBuildScript | Jenkins plugin 注：用于Jenkins构建后，根据结果，执行shell脚本，可用于集群服务器 注：如果是集群环境，在在统一内网，推荐使用PostBuildScript Jenkins的插件安装，在插件管理中安装Generic Webhook Trigger用于gitea构建触发器，Blue Ocean可以理解为Jenkins的一个皮肤（个人感觉界面看起来和操作使用很舒服） 配置JDKJDK版本可以与Jenkins运行环境不一致，比如我安装Jenkins运行环境是java11，但是这里配置的是java8,因为我的项目打包编译环境是java8 配置GIT仓库和构建历史丢弃策略，我这里配置的是构建历史只保留7天，且只保留7个历史构建","categories":[],"tags":[{"name":"CICD","slug":"CICD","permalink":"https://lianshenyi.githup.io/tags/CICD/"}]},{"title":"Hello World","slug":"hello-world","date":"2023-03-04T06:16:54.021Z","updated":"2023-03-07T02:55:30.892Z","comments":true,"path":"2023/03/04/hello-world/","link":"","permalink":"https://lianshenyi.githup.io/2023/03/04/hello-world/","excerpt":"摘要","text":"摘要 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://lianshenyi.githup.io/tags/Hexo/"}]}],"categories":[],"tags":[{"name":"CICD","slug":"CICD","permalink":"https://lianshenyi.githup.io/tags/CICD/"},{"name":"Hexo","slug":"Hexo","permalink":"https://lianshenyi.githup.io/tags/Hexo/"}]}